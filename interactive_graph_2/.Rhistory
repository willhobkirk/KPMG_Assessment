labs(x = "", y = "Speed") +
geom_vline(x=)
ggplot(speed_file, aes(x = Speed_of_Light)) +
geom_histogram(colour = "red", outlier.size = 4) +
theme_classic(base_size = 16) +
labs(x = "") +
geom_vline(x=mean(speed))
library(tidyverse)
speed_file = read_csv("https://raw.githubusercontent.com/DATA2002/data/master/speed_of_light.txt")
speed = speed_file$Speed_of_Light
ggplot(speed_file, aes(x = Speed_of_Light)) +
geom_histogram(colour = "red", outlier.size = 4) +
theme_classic(base_size = 16) +
labs(x = "") +
geom_vline(x=mean(speed))
library(tidyverse)
speed_file = read_csv("https://raw.githubusercontent.com/DATA2002/data/master/speed_of_light.txt")
speed = speed_file$Speed_of_Light
ggplot(speed_file, aes(x = Speed_of_Light)) +
geom_histogram(colour = "red", outlier.size = 4) +
theme_classic(base_size = 16) +
labs(x = "") +
geom_vline(xintercept =mean(speed))
library(tidyverse)
speed_file = read_csv("https://raw.githubusercontent.com/DATA2002/data/master/speed_of_light.txt")
speed = speed_file$Speed_of_Light
ggplot(speed_file, aes(x = Speed_of_Light)) +
geom_histogram(outlier.size = 4) +
theme_classic(base_size = 16) +
labs(x = "") +
geom_vline(xintercept =mean(speed))
library(tidyverse)
speed_file = read_csv("https://raw.githubusercontent.com/DATA2002/data/master/speed_of_light.txt")
speed = speed_file$Speed_of_Light
ggplot(speed_file, aes(x = Speed_of_Light)) +
geom_histogram(outlier.size = 4) +
theme_classic(base_size = 16) +
labs(x = "") +
geom_vline(xintercept =mean(sample(speed),n=6,replace=TRUE),colour ="red")
library(tidyverse)
speed_file = read_csv("https://raw.githubusercontent.com/DATA2002/data/master/speed_of_light.txt")
speed = speed_file$Speed_of_Light
speed_sample = sample(speed,n=6,replace=TRUE)
library(tidyverse)
speed_file = read_csv("https://raw.githubusercontent.com/DATA2002/data/master/speed_of_light.txt")
speed = speed_file$Speed_of_Light
speed_sample = sample(speed,size=6,replace=TRUE)
ggplot(speed_file, aes(x = Speed_of_Light)) +
geom_histogram(outlier.size = 4) +
theme_classic(base_size = 16) +
labs(x = "") +
geom_vline(xintercept =mean(speed_sample),colour ="red")+
geom_vline(xintercept =median(speed_sample),colour ="blue")
library(tidyverse)
speed_file = read_csv("https://raw.githubusercontent.com/DATA2002/data/master/speed_of_light.txt")
speed = speed_file$Speed_of_Light
speed_sample = sample(speed,size=66,replace=TRUE)
ggplot(speed_file, aes(x = Speed_of_Light)) +
geom_histogram(outlier.size = 4) +
theme_classic(base_size = 16) +
labs(x = "") +
geom_vline(xintercept =mean(speed_sample),colour ="red")+
geom_vline(xintercept =median(speed_sample),colour ="blue")
sample_means = numeric(20)
sample_medians = numeric(20)
for (i in 1:20){
speed_sample = sample(speed,size=66,replace=TRUE)
sample_means[i] = mean(speed_sample)
sample_medians[i] = median(speed_sample)
}
hist(sample_means)
library(tidyverse)
speed_file = read_csv("https://raw.githubusercontent.com/DATA2002/data/master/speed_of_light.txt")
speed = speed_file$Speed_of_Light
speed_sample = sample(speed,size=66,replace=TRUE)
ggplot(speed_file, aes(x = Speed_of_Light)) +
geom_histogram(outlier.size = 4) +
theme_classic(base_size = 16) +
labs(x = "") +
geom_vline(xintercept =mean(speed_sample),colour ="red")+
geom_vline(xintercept =median(speed_sample),colour ="blue")
B = 10000
sample_means = numeric(B)
sample_medians = numeric(B)
for (i in 1:B){
speed_sample = sample(speed,size=66,replace=TRUE)
sample_means[i] = mean(speed_sample)
sample_medians[i] = median(speed_sample)
}
hist(sample_means)
x = c(0, 87, 173, 253, 1, 103, 173, 265, 1, 112, 198, 266, 3, 121,
208, 277, 17, 123, 210, 284, 32, 130, 222, 289, 35, 131, 227,
290, 44, 149, 234, 313, 48, 164, 245, 477, 86, 167, 250, 491)
x_df = data.frame(x)
ggplot(x_df,aes(x=x_df))+
geom_histogram()
x = c(0, 87, 173, 253, 1, 103, 173, 265, 1, 112, 198, 266, 3, 121,
208, 277, 17, 123, 210, 284, 32, 130, 222, 289, 35, 131, 227,
290, 44, 149, 234, 313, 48, 164, 245, 477, 86, 167, 250, 491)
x_df = data.frame(x)
ggplot(x_df,aes(x=x))+
geom_histogram()
x = c(0, 87, 173, 253, 1, 103, 173, 265, 1, 112, 198, 266, 3, 121,
208, 277, 17, 123, 210, 284, 32, 130, 222, 289, 35, 131, 227,
290, 44, 149, 234, 313, 48, 164, 245, 477, 86, 167, 250, 491)
x_df = data.frame(x)
ggplot(x_df,aes(x=x))+
geom_qq()
x = c(0, 87, 173, 253, 1, 103, 173, 265, 1, 112, 198, 266, 3, 121,
208, 277, 17, 123, 210, 284, 32, 130, 222, 289, 35, 131, 227,
290, 44, 149, 234, 313, 48, 164, 245, 477, 86, 167, 250, 491)
x_df = data.frame(x)
ggplot(x_df,aes(x=x))+
geom_histogram()+
geom_qq_line()
x = c(0, 87, 173, 253, 1, 103, 173, 265, 1, 112, 198, 266, 3, 121,
208, 277, 17, 123, 210, 284, 32, 130, 222, 289, 35, 131, 227,
290, 44, 149, 234, 313, 48, 164, 245, 477, 86, 167, 250, 491)
x_df = data.frame(x)
ggplot(x_df,aes(x=x))+
geom_histogram()+
geom_qq()
x = c(0, 87, 173, 253, 1, 103, 173, 265, 1, 112, 198, 266, 3, 121,
208, 277, 17, 123, 210, 284, 32, 130, 222, 289, 35, 131, 227,
290, 44, 149, 234, 313, 48, 164, 245, 477, 86, 167, 250, 491)
x_df = data.frame(x)
ggplot(x_df,aes(x=x,sample=x))+
geom_histogram()+
geom_qq()
x = c(0, 87, 173, 253, 1, 103, 173, 265, 1, 112, 198, 266, 3, 121,
208, 277, 17, 123, 210, 284, 32, 130, 222, 289, 35, 131, 227,
290, 44, 149, 234, 313, 48, 164, 245, 477, 86, 167, 250, 491)
x_df = data.frame(x)
ggplot(x_df,aes(x=x,sample=x))+
geom_histogram()+
geom_qq_line()
x = c(0, 87, 173, 253, 1, 103, 173, 265, 1, 112, 198, 266, 3, 121,
208, 277, 17, 123, 210, 284, 32, 130, 222, 289, 35, 131, 227,
290, 44, 149, 234, 313, 48, 164, 245, 477, 86, 167, 250, 491)
x_df = data.frame(x)
ggplot(x_df,aes(x=x))+
geom_histogram()
qnorm(x)
x = c(0, 87, 173, 253, 1, 103, 173, 265, 1, 112, 198, 266, 3, 121,
208, 277, 17, 123, 210, 284, 32, 130, 222, 289, 35, 131, 227,
290, 44, 149, 234, 313, 48, 164, 245, 477, 86, 167, 250, 491)
x_df = data.frame(x)
ggplot(x_df,aes(x=x))+
geom_histogram()
qnorm(x)
x = c(0, 87, 173, 253, 1, 103, 173, 265, 1, 112, 198, 266, 3, 121,
208, 277, 17, 123, 210, 284, 32, 130, 222, 289, 35, 131, 227,
290, 44, 149, 234, 313, 48, 164, 245, 477, 86, 167, 250, 491)
x_df = data.frame(x)
ggplot(x_df,aes(x=x))+
geom_histogram()
qqnorm(x)
x = c(0, 87, 173, 253, 1, 103, 173, 265, 1, 112, 198, 266, 3, 121,
208, 277, 17, 123, 210, 284, 32, 130, 222, 289, 35, 131, 227,
290, 44, 149, 234, 313, 48, 164, 245, 477, 86, 167, 250, 491)
x_df = data.frame(x)
ggplot(x_df,aes(x=x))+
geom_histogram()
qqnorm(x)
qqline(x)
?t.test
t.test(x,mu = 130)
?wilcox.test
wilcox.test(x,mu =130)
t.test(x,mu = 130)
?list
?append
?append
t.test(x,mu = 130)
wilcox.test(x,mu =130)
B = 10000
samples = data.frame(sample(x,replace=TRUE))
for (i in 2:B){
samples = cbind(samples,sample(x,replace=TRUE))
}
size(samples)
length(samples)
summarize(samples)
nrow(samples)
ncol(samples)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
tablet = read_tsv("https://raw.githubusercontent.com/DATA2002/data/master/tablet1.txt")
glimpse(tablet)
library(tidyverse)
tablet = read_tsv("https://raw.githubusercontent.com/DATA2002/data/master/tablet1.txt")
tabdat = gather(tablet, key = "lab", value = "measurement")
tabdat %>%
ggplot() +
aes(x = lab, y = measurement, fill = lab) +
geom_boxplot() +
theme_classic() +
labs(y = "Chlorpheniramine maleate (mg)",
x = "Lab", fill = "")
tabdat
?t.test
tabdat %>% filter(lab =="Lab1") %>% select(measurement) %>% t.test(mu = 4.0,alternative = "tow.sided")
tabdat %>% filter(lab =="Lab1") %>% select(measurement) %>% t.test(mu = 4.0,alternative = "two.sided")
pain = read_tsv("https://raw.githubusercontent.com/DATA2002/data/master/blonds.txt")
pain = pain %>% mutate(
HairColour = factor(HairColour, levels = c("LightBlond", "DarkBlond", "LightBrunette", "DarkBrunette"))
)
ggplot(pain, aes(x = HairColour, y = Pain)) +
geom_boxplot() + theme_classic()
?permutations
library(combinat)
library(permutations)
perm <- function(v) {
n <- length(v)
if (n == 1) v
else {
X <- NULL
for (i in 1:n) X <- rbind(X, cbind(v[i], perm(v[-i])))
X
}
}
contrast_coeffs = perm([1,-1,0,0])
contrast_coeffs = perm(c(1,-1,0,0)0
contrast_coeffs = perm(c(1,-1,0,0))
contrast_coeffs
niq(perm(c(1,-1,0,0)))
uniq(perm(c(1,-1,0,0)))
tabdat %>% aov() %>% summary()
tabdat %>% aov() %>% summary()
aov(measurement~lab,data=tabdat) %>% summary()
source('~/.active-rstudio-document', echo=TRUE)
data = read.csv("housing-prices-ge19.csv")
data = read.csv("/Users/will/Desktop/data2902 group/housing-prices-ge19.csv")
head(data)
library(tidyverse)
data = read.csv("/Users/will/Desktop/data2902 group/housing-prices-ge19.csv")
head(data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(equatiomatic)
library(caret)
df_raw = readr::read_tsv("housing-prices-ge19.txt")
df = subset(df_raw, select = -c(Test))
df = df %>% janitor::clean_names()
colnames(df)
var_mapping = c("price" = "Price ($USD)",
"lot_size" = "Lot Size (acres)",
"waterfront" = "Waterfront",
"age" = "Age of House (years)",
"land_value" = "Value of Land ($USD)",
"new_construct" = "New Construction",
"central_air" = "Central Air",
"fuel_type" = "Type of Fuel for Heating",
"heat_type" = "Type of Heating System",
"sewer_type" = "Type of Sewer System",
"living_area" = "Living Area (square feet)",
"pct_college" = "Graduated College in Neighbourhood (%)",
"bedrooms" = "Number of Bedrooms",
"fireplaces" = "Number of Fireplaces",
"bathrooms" = "Number of Bathrooms",
"rooms" = "Number of Rooms"
)
independent = "living_area"
dependent = "price"
lm1 = lm(df[[dependent]] ~ df[[independent]],
data = df)
lm1
df_mutated = df %>%
mutate(
resid = lm1$residuals,
fitted = lm1$fitted.values
)
df_mutated = df_mutated %>%
mutate(log_dependent = log(.data[[dependent]]))
lm2 = lm(log_dependent ~ df[[independent]], data = df_mutated)
df_mutated = df_mutated %>%
mutate(
lresid = lm2$residuals,
lfitted = lm2$fitted.values
)
summary(lm2)
extract_eq(lm2, use_coefs = TRUE)
summary(lm2)$coefficients %>% round(4)
confint(lm2) %>% round(3)
multiple_independent = c("bedrooms", "lot_size", "living_area")
df_log = df %>%
mutate(log_price = log(price))
# Remove the price, replaced by log_price
df_log = subset(df_log, select = -c(price))
# Multiple regression on 3 variables
lm3 = lm(log_price ~  bedrooms + lot_size + living_area, df_log)
summary(lm3)$coefficients %>% round(4)
M0 = lm(log_price ~ 1, data = df_log)  # Null model
M1 = lm(log_price ~ ., data = df_log)  # Full model
step.back.aic = step(M1,
direction = "backward",
trace = FALSE)
# summary(step.back.aic)
round(summary(step.back.aic)$coef, 3)
step.fwd.aic = step(M0, scope = list(lower = M0, upper = M1), direction = "forward", trace = FALSE)
# summary(step.fwd.aic)
round(summary(step.fwd.aic)$coef, 3)
new_house = data.frame(bedrooms = mean(df_log$bedrooms), lot_size = mean(df_log$lot_size), living_area = mean(df_log$living_area))
single_prediction = predict(lm3, new_house, interval = "prediction", level = 0.90)
mean_prediction = predict(lm3, new_house, interval = "confidence", level = 0.90)
single_prediction
mean_prediction
lm2 = lm(log_price ~ living_area, data = df_log)
new_living_area = data.frame(living_area = seq(from = 600,
to = 5250,
by = 50))
pi = predict(lm2, new_living_area, interval = "prediction", level = 0.90)
ci = predict(lm2, new_living_area, interval = "confidence", level = 0.90)
interval_df = data.frame(
pi_upper = pi[,"upr"],
pi_lower = pi[,"lwr"],
ci_upper = ci[,"upr"],
ci_lower = ci[,"lwr"],
living_area = new_living_area$living_area
)
ggplot(df_log, aes(x = living_area, y = log_price)) +
geom_point() +
theme_classic(base_size = 30) +
geom_line(data = interval_df, aes(y=pi_lower), color = "red", linetype = 2) +
geom_line(data = interval_df, aes(y=pi_upper), color = "red", linetype = 2) +
geom_line(data = interval_df, aes(y=ci_lower), color = "blue", linetype = 1) +
geom_line(data = interval_df, aes(y=ci_upper), color = "blue", linetype = 1) +
geom_smooth(method = "lm", se = TRUE)
n = nrow(df_log)
n_train = floor(0.8*n)
n_test = n - n_train
grp_labs = rep(c("Train","Test"), times = c(n_train, n_test))
df_log$grp = sample(grp_labs)
train_dat = df_log %>% filter(grp == "Train")
lm_simple_train = lm(log_price ~ living_area, data = train_dat)
lm_full_train = lm(log_price ~ living_area + lot_size + bedrooms, data = train_dat)
test_dat = df_log %>% filter(grp == "Test")
simple_pred = predict(lm_simple_train, newdata = test_dat)
full_pred = predict(lm_full_train, newdata = test_dat)
simple_mse = mean((test_dat$log_price - simple_pred)^2)
sqrt(simple_mse)
full_mse = mean((test_dat$log_price - full_pred)^2)
sqrt(full_mse)
set.seed(3.14159)
cv_simple = train(
log_price ~ living_area,
df_log,
method = "lm",
trControl = trainControl(
method = "cv", number = 10,
verboseIter = FALSE
)
)
cv_simple
cv_full = train(
log_price ~ living_area + bedrooms + lot_size, df_log,
method = "lm",
trControl = trainControl(
method = "cv", number = 10,
verboseIter = FALSE
)
)
cv_full
cv_total = train(
log_price ~ .,
data = df_log,
method = "lm",
trControl = trainControl(
method = "cv", number = 10,
verboseIter = FALSE
)
)
cv_total
cv_optimal = train(
(log_price ~ living_area + land_value + bathrooms + fuel_type + waterfront + age + new_construct +
lot_size + central_air + rooms + pct_college),
data = df_log,
method = "lm",
trControl = trainControl(
method = "cv", number = 10,
verboseIter = FALSE
)
)
cv_optimal
data %>% plot_ly(x =~land_value, y=~living_area, z=~bathrooms,color = ~price,type="scatter3d", mode="markers")
library(plotly)
data %>% plot_ly(x =~land_value, y=~living_area, z=~bathrooms,color = ~price,type="scatter3d", mode="markers")
library(plotly)
data = df_raw %>% janitor::clean_names()
data %>% plot_ly(x =~land_value, y=~living_area, z=~bathrooms,color = ~price,type="scatter3d", mode="markers")
summary(data$price)
summary(data$living_area)
summary(data$land_value)
summary(data$bathrooms)
library(shiny)
fuel_type + waterfront + age + new_construct +
lot_size + central_air + rooms + pct_college
summary(data$fuel_type)
table(data$fuel_type)
unique(data$fuel_type)
summary(data$age)
table(data$new_construct)
table(data$central_air)
summary(data$lot_size)
summary(data$rooms)
summary(data$pct_college)
runApp('Desktop/untitled folder/interactive_graph_2')
library(shiny)
library(tidyverse)
df_raw = readr::read_tsv("housing-prices-ge19.txt")
df = subset(df_raw, select = -c(Test))
df = df %>% janitor::clean_names()
df_log = df %>%
mutate(log_price = log(price))
setwd("~/Desktop/untitled folder/interactive_graph_2")
df_raw = readr::read_tsv("housing-prices-ge19.txt")
df = subset(df_raw, select = -c(Test))
df = df %>% janitor::clean_names()
df_log = df %>%
mutate(log_price = log(price))
df_raw = readr::read_tsv("housing-prices-ge19.txt")
df = subset(df_raw, select = -c(Test))
df = df %>% janitor::clean_names()
df_log = df %>%
mutate(log_price = log(price))
df_log = subset(df_log, select = -c(price))
lm_three = lm(log_price ~  bedrooms + lot_size + living_area, df_log)
lm_aic = lm(log_price ~ living_area + land_value + bathrooms + fuel_type + waterfront + age + new_construct +
lot_size + central_air + rooms + pct_college, df_log)
new_dat = data.frame(bedrooms = 4,lot_size=5,living_area=10)
lm3 = lm(log_price ~  bedrooms + lot_size + living_area, df_log)
lm_aic = lm(log_price ~ living_area + land_value + bathrooms + fuel_type + waterfront + age + new_construct +
lot_size + central_air + rooms + pct_college, df_log)
predict(lm3,new_dat)
predict(lm3,new_dat,interval="prediction")
library(plotly)
data = df_raw %>% janitor::clean_names()
data %>% plot_ly(x =~lot_size, y=~living_area, z=~bedrooms,color = ~price,type="scatter3d", mode="markers")
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("htmlTable")
data.frame(fuck="you") %>% htmlTable::htmlTable()
runApp()
df_raw = readr::read_tsv("housing-prices-ge19.txt")
df = subset(df_raw, select = -c(Test))
df = df %>% janitor::clean_names()
df_log = df %>%
mutate(log_price = log(price))
df_log = subset(df_log, select = -c(price))
lm3 = lm(log_price ~  bedrooms + lot_size + living_area, df_log)
lm_aic = lm(log_price ~ living_area + land_value + bathrooms + fuel_type + waterfront + age + new_construct +
lot_size + central_air + rooms + pct_college, df_log)
?log()
?log
new_dat
pred = predict(lm3,new_dat,interval="prediction",level=0.95)
pred
runApp()
summary(data$bedrooms)
summary(data$rooms)
runApp()
pred = predict(lm3,new_dat,interval="prediction",level=0.95)
pred$upr
pred
names(pred)
pred[1,]
pred[,1]
runApp()
runApp()
pred
runApp()
lm3
runApp()
data$waterfront
runApp()
runApp()
runApp()
lm_aic
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderDataTable
runApp()
runApp()
int(1.0)
integer(1.0)
as.integer(1.0)
as.integer(1.5)
as.integer(1.6)
runApp()
runApp()
runApp()
?tableOutput
runApp()
install.packages("DT")
library(DT)
runApp()
?renderDataTable
runApp()
runApp()
lm_aic
runApp()
runApp()
runApp()
runApp()
